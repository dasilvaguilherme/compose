version: '3.8'

services:
  # PostgreSQL básico e funcional
  db:
    container_name: supabase-db
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: supabase123
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # Script inline SIMPLES que funciona
    command: |
      bash -c "
      # Função para executar SQL quando postgres estiver pronto
      init_db() {
        echo 'Aguardando PostgreSQL...'
        while ! pg_isready -U postgres > /dev/null 2>&1; do
          sleep 1
        done
        echo 'PostgreSQL pronto, criando bancos...'
        
        # Criar bancos necessários
        psql -U postgres -c \"CREATE DATABASE IF NOT EXISTS supabase;\" || true
        psql -U postgres -c \"CREATE DATABASE \\\"_supabase\\\";\" || true
        
        # Criar usuários necessários
        psql -U postgres -c \"CREATE USER supabase_admin WITH PASSWORD 'supabase123' SUPERUSER;\" || true
        psql -U postgres -c \"CREATE USER authenticator WITH PASSWORD 'supabase123';\" || true
        psql -U postgres -c \"CREATE USER anon;\" || true
        psql -U postgres -c \"CREATE USER authenticated;\" || true
        psql -U postgres -c \"CREATE USER service_role;\" || true
        
        # Configurar banco _supabase
        psql -U postgres -d _supabase -c \"CREATE SCHEMA IF NOT EXISTS _analytics;\" || true
        psql -U postgres -d _supabase -c \"GRANT ALL ON SCHEMA _analytics TO supabase_admin;\" || true
        
        # Configurar banco supabase
        psql -U postgres -d supabase -c \"CREATE EXTENSION IF NOT EXISTS pgcrypto;\" || true
        psql -U postgres -d supabase -c \"CREATE SCHEMA IF NOT EXISTS auth;\" || true
        psql -U postgres -d supabase -c \"GRANT ALL ON SCHEMA auth TO supabase_admin;\" || true
        
        echo 'Bancos criados com sucesso!'
      }
      
      # Iniciar postgres em background
      postgres &
      PG_PID=\$!
      
      # Aguardar e configurar bancos
      init_db
      
      # Manter postgres em foreground
      wait \$PG_PID
      "
    networks:
      - traefik

  # Analytics simplificado
  analytics:
    container_name: supabase-analytics
    image: supabase/logflare:1.12.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      LOGFLARE_NODE_HOST: 0.0.0.0
      DB_USERNAME: supabase_admin
      DB_DATABASE: _supabase
      DB_HOSTNAME: db
      DB_PORT: 5432
      DB_PASSWORD: supabase123
      DB_SCHEMA: _analytics
      LOGFLARE_API_KEY: your-secret-logflare-api-key
      LOGFLARE_SINGLE_TENANT: true
      LOGFLARE_SUPABASE_MODE: true
      LOGFLARE_MIN_CLUSTER_SIZE: 1
      POSTGRES_BACKEND_URL: postgresql://supabase_admin:supabase123@db:5432/_supabase
      POSTGRES_BACKEND_SCHEMA: _analytics
      LOGFLARE_FEATURE_FLAG_OVERRIDE: multibackend=true
    healthcheck:
      test: ["CMD", "curl", "http://0.0.0.0:4000/health"]
      timeout: 10s
      interval: 10s
      retries: 3
      start_period: 45s
    networks:
      - traefik

  # Meta API
  meta:
    container_name: supabase-meta
    image: supabase/postgres-meta:v0.89.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: supabase
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: supabase123
    networks:
      - traefik


  # API REST  
  rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v12.2.12
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://postgres:supabase123@db:5432/supabase
      PGRST_DB_SCHEMAS: public
      PGRST_DB_ANON_ROLE: postgres
      PGRST_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
    networks:
      - traefik

  # Dashboard Studio
  studio:
    container_name: supabase-studio
    image: supabase/studio:latest
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      meta:
        condition: service_started
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      DEFAULT_ORGANIZATION_NAME: "Guinfra"
      DEFAULT_PROJECT_NAME: "Supabase Project"
      POSTGRES_PASSWORD: supabase123
      # Configurações básicas
      NEXT_PUBLIC_ENABLE_LOGS: false
      NEXT_PUBLIC_ENABLE_REALTIME: false
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.guinfra-supabase.rule=Host(`guinfra-supabase.cloudfy.cloud`)"
      - "traefik.http.routers.guinfra-supabase.entrypoints=websecure"
      - "traefik.http.routers.guinfra-supabase.tls.certresolver=cloudflare"
      - "traefik.http.services.guinfra-supabase.loadbalancer.server.port=3000"

volumes:
  db-data:

networks:
  traefik:
    external: true 
